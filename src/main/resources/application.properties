spring.application.name=authentication

# Server
server.port=8080

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.open-in-view=false

# Datasource (개발환경 예시: H2 메모리)
spring.datasource.url=jdbc:h2:mem:authdb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# Redis (추가 예정)
# spring.data.redis.host=localhost
# spring.data.redis.port=6379

# JWT 설정 (기본값: 데모용, 실제 비밀키로 교체 필요)
app.jwt.access-secret=change-me-access-secret-change-me-access-secret
app.jwt.refresh-secret=change-me-refresh-secret-change-me-refresh-secret
app.jwt.access-ttl-seconds=900
app.jwt.refresh-ttl-seconds=604800

# 로그인 잠금 설정
app.lockout.max-failures=5
app.lockout.failure-window-seconds=900
app.lockout.lockout-seconds=900

# 이메일 인증
app.email.enabled=false
app.email.verification.expire-seconds=1800
app.email.verification.base-url=http://localhost:8080/api/auth/verify

# 메일(SMTP) - 필요 시 실제 SMTP로 교체
# spring.mail.host=smtp.example.com
# spring.mail.port=587
# spring.mail.username=your_username
# spring.mail.password=your_password
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true

# OAuth2 (Google)
# spring.security.oauth2.client.registration.google.client-id=YOUR_GOOGLE_CLIENT_ID
# spring.security.oauth2.client.registration.google.client-secret=YOUR_GOOGLE_CLIENT_SECRET
# spring.security.oauth2.client.registration.google.scope=openid,profile,email

# Actuator Health (로컬 개발 시 Redis 미기동이면 DOWN이 되므로 비활성화)
management.health.redis.enabled=false
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoints.web.exposure.include=*
